/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2017-05-03 05:49:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.axis2.AxisFault;
import org.wso2.carbon.CarbonConstants;
import org.wso2.carbon.CarbonError;
import org.wso2.carbon.ui.CarbonUIMessage;
import javax.xml.namespace.QName;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import org.wso2.carbon.ui.util.CharacterEncoder;

public final class error_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tlds/carbontags.tld", Long.valueOf(1482326920000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  carbon:breadcrumb
      org.wso2.carbon.ui.taglibs.Breadcrumb _jspx_th_carbon_005fbreadcrumb_005f0 = (org.wso2.carbon.ui.taglibs.Breadcrumb) _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.get(org.wso2.carbon.ui.taglibs.Breadcrumb.class);
      try {
        _jspx_th_carbon_005fbreadcrumb_005f0.setPageContext(_jspx_page_context);
        _jspx_th_carbon_005fbreadcrumb_005f0.setParent(null);
        // /admin/error.jsp(30,0) name = label type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setLabel("error.occurred");
        // /admin/error.jsp(30,0) name = resourceBundle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setResourceBundle("org.wso2.carbon.i18n.Resources");
        // /admin/error.jsp(30,0) name = topPage type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setTopPage(true);
        // /admin/error.jsp(30,0) name = request type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setRequest(request);
        int _jspx_eval_carbon_005fbreadcrumb_005f0 = _jspx_th_carbon_005fbreadcrumb_005f0.doStartTag();
        if (_jspx_th_carbon_005fbreadcrumb_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
      } finally {
        _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.reuse(_jspx_th_carbon_005fbreadcrumb_005f0);
      }
      out.write('\n');
      out.write('\n');

    //First checks whether there is a CarbonUIMessage in the request
    CarbonUIMessage carbonMessage = (CarbonUIMessage) session.getAttribute(CarbonUIMessage.ID);

    if (carbonMessage == null) {
        carbonMessage = (CarbonUIMessage) request.getAttribute(CarbonUIMessage.ID);
    } else {
        session.removeAttribute(CarbonUIMessage.ID);
    }
    if (carbonMessage != null) {
        session.removeAttribute(CarbonUIMessage.ID);
        Exception e = carbonMessage.getException();
        boolean authFailure = false;
        boolean sessionTimedOut = false;
        if (e != null) {
            Throwable cause = e.getCause();
            if (e instanceof AxisFault) {
                AxisFault axisFault = (AxisFault) e;
                QName name = axisFault.getFaultCode();
                if (name != null && name.getLocalPart() != null && name.getLocalPart().equals(CarbonConstants.AUTHZ_FAULT_CODE)) {
                    authFailure = true;
                }
                if(e.getMessage().toLowerCase().indexOf("session timed out") != -1){
                     sessionTimedOut = true;
                }
            } else if ((cause != null) && (cause instanceof AxisFault)) {
                AxisFault axisFault = (AxisFault) cause;
                QName name = axisFault.getFaultCode();
                if (name != null && name.getLocalPart() != null && name.getLocalPart().equals(CarbonConstants.AUTHZ_FAULT_CODE)) {
                    authFailure = true;
                }
            }
        }


      out.write("\n");
      out.write("<div id=\"middle\">\n");
      out.write("    ");

        if (authFailure) {
    
      out.write("\n");
      out.write("    <h2><img src='../dialog/img/error.gif'/> Authorization Failure</h2>\n");
      out.write("    ");
 } else if(sessionTimedOut) {
           session.invalidate();
           return;
    } else { 
      out.write("\n");
      out.write("    <h2><img src='../dialog/img/error.gif'/> System Error Occurred</h2>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    <div id=\"workArea\">\n");
      out.write("        <table class=\"styledLeft\">\n");
      out.write("            <tbody>\n");
      out.write("            ");

                if (e != null) {
                    if (authFailure) {
            
      out.write("\n");
      out.write("            <tr>\n");
      out.write("                <td><b>Authorization Failure</b></td>\n");
      out.write("            </tr>\n");
      out.write("            <tr>\n");
      out.write("                <td>\n");
      out.write("                    ");

                        out.write("You are not authorized to perform this action.");
                    
      out.write("\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            ");

            } else {
            
      out.write("\n");
      out.write("            <tr>\n");
      out.write("                <td><b>");
      out.print(carbonMessage.getMessage());
      out.write("</b></td>\n");
      out.write("            </tr>\n");
      out.write("            <tr>\n");
      out.write("                <td>\n");
      out.write("                    ");

	                    StringWriter sw = new StringWriter();
	                    PrintWriter pw = new PrintWriter(sw);
                    	if(carbonMessage.isShowStackTrace()){
                    	    pw.write("<b>The following error details are available. Please refer logs for more details.</b><br/>");
                            e.printStackTrace(pw);
                            String errorStr = sw.toString();
                            errorStr = errorStr.replaceAll("\n", "<br/>");
                            for (int i = 0; i < errorStr.length(); i++) {
                                out.write(errorStr.charAt(i));
                            }
                        }else{
                        	pw.write("<b>Please refer log for details.</b><br/>");
                        }
                        sw.close();
                        pw.close();
                        out.flush();
            	}
                    
      out.write("\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            ");

            } else {
            
      out.write("\n");
      out.write("            <tr>\n");
      out.write("                <td><b>");
      out.print(carbonMessage.getMessage());
      out.write("\n");
      out.write("                </b></td>\n");
      out.write("            </tr>\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("    </div>\n");
      out.write("</div>\n");

    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String errorMsg = CharacterEncoder.getSafeText(request.getParameter("errorMsg"));
    CarbonError error = null;
    boolean retrievedFromSession = false;
    error = (CarbonError) request.getAttribute(CarbonError.ID);
    if (error == null) {
        //look for error object in session
        error = (CarbonError) request.getSession().getAttribute(CarbonError.ID);
        retrievedFromSession = true;
    }
    if (error != null) {

      out.write("\n");
      out.write("<p>\n");
      out.write("    <label>Error occurred</label>\n");
      out.write("        ");


     ArrayList<String> list = (ArrayList<String>) error.getErrors();
     String[] errors = (String[])list.toArray(new String[list.size()]);
     for(int a = 0;a < errors.length;a++){

    
      out.write("\n");
      out.write("<li>");
      out.print(errors[a]);
      out.write("\n");
      out.write("</li>\n");

    }

      out.write("\n");
      out.write("</p>\n");

        if (retrievedFromSession) {
            request.getSession().setAttribute(CarbonError.ID, null);
        }
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
